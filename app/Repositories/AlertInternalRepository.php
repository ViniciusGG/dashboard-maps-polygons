<?php

namespace App\Repositories;

use App\Jobs\NotificationNewInvite;
use App\Models\Alert;
use App\Models\AlertMessage;
use App\Models\Filter;
use App\Models\Indicator;
use App\Models\LicenseIndicator;
use App\Models\Role;
use App\Models\Workspace;
use Carbon\Carbon;
use Illuminate\Support\Facades\Cache;

class AlertInternalRepository extends AlertRepository
{

    public function __construct()
    {
        parent::__construct();
    }

    public function filter($filters, $queryParams = [], $relationships = [], $appends = [])
    {
        $query = $this->model->newQuery();

        $take = $filters['take'] ?? $this->take;
        $clientUuid = $filters['client_uuid'] ?? '';
        $indicatorGroupUuid = $filters['indicator_group_uuid'] ?? '';
        $indicatorUuid = $filters['indicator_uuid'] ?? '';

        if ($clientUuid) {
            $worskpace =  Workspace::select('id')->where('uuid', $clientUuid)->firstOrFail();
            $query->where('workspace_id', $worskpace->id);
        }

        if ($indicatorGroupUuid) {
            $filter = Filter::select('id')->where('uuid', $indicatorGroupUuid)->first();
            $query->where('category', $filter->id);
        }

        if ($indicatorUuid) {
            $indicator = Indicator::select('id')->where('uuid', $indicatorUuid)->first();
            $query->where('indicator', $indicator->id);
        }


        $query = $query->with('indicators','satellite','filter','workspace','alertImages');

        $columns = [
            'id',
            'uuid',
            'name',
            'workspace_id',
            'satellite_id',
            'category',
            'indicator',
            'alert_datetime',
            'lat',
            'lng',
            'algorithm_source',
            'intensity',
            'area',
            'severity',
            'created_at',
        ];

        $query->orderBy('created_at', 'desc');


        return $query->paginate($take, $columns)->each(function ($item) {
            $item->setAppends(['workspace_uuid','satellite_uuid','filter_group_uuid','indicators_uuid']);

            $item->setHidden([
                'id',
                'workspace_id', 'workspace',
                'satellite_id', 'satellite',
                'category', 'filter',
                'indicator', 'indicators',

            ]);

        });




        if ($appends) {
            return $query->paginate($take, $columns)->setAppends($appends);
        }

        return $query->paginate($take, $columns);// TODO: Change the autogenerated stub
    }

}
